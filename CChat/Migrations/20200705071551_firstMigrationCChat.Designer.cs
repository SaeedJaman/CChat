// <auto-generated />
using System;
using CChat.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CChat.Migrations
{
    [DbContext(typeof(CChatDbContext))]
    [Migration("20200705071551_firstMigrationCChat")]
    partial class firstMigrationCChat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CChat.Data.Entity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CChat.Data.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmpCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<decimal?>("MaxAmount");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("companyId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(120);

                    b.Property<int?>("isActive");

                    b.Property<string>("org")
                        .HasMaxLength(120);

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(120);

                    b.Property<int>("userId");

                    b.Property<int?>("userTypeId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("companyId");

                    b.HasIndex("userTypeId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CChat.Data.Entity.Auth.CChatModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("moduleName");

                    b.Property<string>("moduleNameBN");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("CChatModules");
                });

            modelBuilder.Entity("CChat.Data.Entity.Auth.DbChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("entityName")
                        .HasMaxLength(300);

                    b.Property<string>("entityState")
                        .HasMaxLength(100);

                    b.Property<string>("fieldName")
                        .HasMaxLength(200);

                    b.Property<string>("fieldValue");

                    b.Property<int?>("isDelete");

                    b.Property<string>("remarks")
                        .HasMaxLength(300);

                    b.Property<int?>("sessionId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("DbChangeHistories");
                });

            modelBuilder.Entity("CChat.Data.Entity.Auth.UserLogHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("browserName")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("ipAddress")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("logTime")
                        .HasMaxLength(250);

                    b.Property<string>("pcName")
                        .HasMaxLength(250);

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("userId")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("UserLogHistories");
                });

            modelBuilder.Entity("CChat.Data.Entity.Auth.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("groupId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("userTypeName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("userTypeNameBn")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("groupId");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("CChat.Data.Entity.Auth.UserTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("groupTypeName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("groupTypeNameBN")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("UserTypeGroup");
                });

            modelBuilder.Entity("CChat.HRPMS.Data.Entity.Employee.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("deptCode");

                    b.Property<string>("deptName")
                        .IsRequired();

                    b.Property<string>("deptNameBn");

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Department","HR");
                });

            modelBuilder.Entity("CChat.HRPMS.Data.Entity.Employee.EmployeeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("LPRDate");

                    b.Property<string>("PRLEndDate");

                    b.Property<string>("PRLStartDate");

                    b.Property<int?>("activityStatus");

                    b.Property<string>("batch");

                    b.Property<string>("birthIdentificationNo")
                        .HasMaxLength(100);

                    b.Property<string>("birthPlace");

                    b.Property<string>("bloodGroup");

                    b.Property<int?>("branchId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("dateOfBirth");

                    b.Property<DateTime?>("dateOfPermanent");

                    b.Property<DateTime?>("dateofregularity");

                    b.Property<int?>("departmentId");

                    b.Property<string>("designation");

                    b.Property<int>("designationCheck");

                    b.Property<string>("disability");

                    b.Property<string>("emailAddress");

                    b.Property<string>("emailAddressPersonal");

                    b.Property<string>("employeeCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("fatherNameBangla");

                    b.Property<string>("fatherNameEnglish");

                    b.Property<bool>("freedomFighter");

                    b.Property<string>("freedomFighterNo");

                    b.Property<string>("gender");

                    b.Property<string>("govtID")
                        .HasMaxLength(250);

                    b.Property<string>("gpfAcNo");

                    b.Property<string>("gpfNomineeName");

                    b.Property<string>("homeDistrict");

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("joiningDateGovtService");

                    b.Property<DateTime?>("joiningDatePresentWorkstation");

                    b.Property<string>("joiningDesignation");

                    b.Property<string>("maritalStatus");

                    b.Property<string>("mobileNumberOffice")
                        .HasMaxLength(50);

                    b.Property<string>("mobileNumberPersonal")
                        .HasMaxLength(50);

                    b.Property<string>("motherNameBangla");

                    b.Property<string>("motherNameEnglish");

                    b.Property<string>("nameBangla");

                    b.Property<string>("nameEnglish");

                    b.Property<string>("nationalID")
                        .HasMaxLength(100);

                    b.Property<string>("nationality");

                    b.Property<string>("natureOfRequitment")
                        .HasMaxLength(100);

                    b.Property<string>("orgType")
                        .HasMaxLength(100);

                    b.Property<string>("pabx");

                    b.Property<int?>("post");

                    b.Property<string>("seniorityNumber")
                        .HasMaxLength(50);

                    b.Property<string>("skypeId");

                    b.Property<string>("specialSkill");

                    b.Property<string>("telephoneOffice");

                    b.Property<string>("telephoneResidence");

                    b.Property<string>("tin");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("branchId");

                    b.HasIndex("departmentId");

                    b.ToTable("EmployeeInfo","HR");
                });

            modelBuilder.Entity("CChat.HRPMS.Data.Entity.Employee.SpecialBranchUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CCCatID");

                    b.Property<string>("branchCode");

                    b.Property<string>("branchUnitName");

                    b.Property<string>("branchUnitNameBN");

                    b.Property<int?>("companyId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("companyId");

                    b.ToTable("SpecialBranchUnit","HR");
                });

            modelBuilder.Entity("CChat.HRPMS.Employee.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("addressLine");

                    b.Property<string>("alternetEmail")
                        .HasMaxLength(150);

                    b.Property<string>("businessNature")
                        .HasMaxLength(250);

                    b.Property<string>("companyEmail")
                        .HasMaxLength(150);

                    b.Property<string>("companyName")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("dateOfEstablishment");

                    b.Property<string>("fileName")
                        .HasMaxLength(250);

                    b.Property<string>("filePath")
                        .HasMaxLength(500);

                    b.Property<int?>("isDelete");

                    b.Property<decimal?>("liquidityRatio");

                    b.Property<string>("managerName")
                        .HasMaxLength(250);

                    b.Property<string>("officeTelephone")
                        .HasMaxLength(150);

                    b.Property<string>("ownerName")
                        .HasMaxLength(250);

                    b.Property<int?>("permanentEmployee");

                    b.Property<string>("tinNo")
                        .HasMaxLength(150);

                    b.Property<string>("tradeLicense")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("vatNo")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CChat.Data.Entity.ApplicationUser", b =>
                {
                    b.HasOne("CChat.HRPMS.Employee.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("CChat.Data.Entity.Auth.UserType", "userType")
                        .WithMany()
                        .HasForeignKey("userTypeId");
                });

            modelBuilder.Entity("CChat.Data.Entity.Auth.UserType", b =>
                {
                    b.HasOne("CChat.Data.Entity.Auth.UserTypeGroup", "group")
                        .WithMany()
                        .HasForeignKey("groupId");
                });

            modelBuilder.Entity("CChat.HRPMS.Data.Entity.Employee.EmployeeInfo", b =>
                {
                    b.HasOne("CChat.Data.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CChat.HRPMS.Data.Entity.Employee.SpecialBranchUnit", "branch")
                        .WithMany()
                        .HasForeignKey("branchId");

                    b.HasOne("CChat.HRPMS.Data.Entity.Employee.Department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId");
                });

            modelBuilder.Entity("CChat.HRPMS.Data.Entity.Employee.SpecialBranchUnit", b =>
                {
                    b.HasOne("CChat.HRPMS.Employee.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CChat.Data.Entity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CChat.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CChat.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CChat.Data.Entity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CChat.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CChat.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
